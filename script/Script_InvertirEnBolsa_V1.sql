-- MySQL Script generated by MySQL Workbench
-- Sun Dec  6 22:54:29 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema IEB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `IEB` ;

-- -----------------------------------------------------
-- Schema IEB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `IEB` DEFAULT CHARACTER SET utf8 ;
USE `IEB` ;

-- -----------------------------------------------------
-- Table `IEB`.`Client`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`Client` ;

CREATE TABLE IF NOT EXISTS `IEB`.`Client` (
  `id_client` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador único de cliente',
  `client_code` INT NULL COMMENT 'Código de cliente',
  `client_name` VARCHAR(45) NULL COMMENT 'Nombre de cliente',
  `client_email` VARCHAR(100) NULL,
  `create_on` DATETIME NULL DEFAULT NOW(),
  `delete` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`id_client`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `client_code_UNIQUE` ON `IEB`.`Client` (`client_code` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`Market`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`Market` ;

CREATE TABLE IF NOT EXISTS `IEB`.`Market` (
  `id_market` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `market_code` INT NULL,
  `market_name` VARCHAR(45) NULL,
  `market_email` VARCHAR(100) NULL,
  `create_on` DATETIME NULL DEFAULT NOW(),
  `delete` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`id_market`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `market_code_UNIQUE` ON `IEB`.`Market` (`market_code` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`Category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`Category` ;

CREATE TABLE IF NOT EXISTS `IEB`.`Category` (
  `id_category` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `category_code` INT NULL,
  `category_name` VARCHAR(45) NULL,
  `create_on` DATETIME NULL DEFAULT NOW(),
  `delete` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`id_category`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `categoryCode_UNIQUE` ON `IEB`.`Category` (`category_code` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`Product` ;

CREATE TABLE IF NOT EXISTS `IEB`.`Product` (
  `id_product` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `product_code` VARCHAR(45) NULL,
  `product_name` VARCHAR(45) NULL,
  `buy_price` FLOAT NULL,
  `public_sell_price` FLOAT NULL,
  `mayor_sell_price` FLOAT NULL,
  `create_on` DATETIME NULL DEFAULT NOW(),
  `delate` TINYINT NULL DEFAULT 0,
  `id_category` INT UNSIGNED NOT NULL,
  `id_market` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_product`, `id_category`, `id_market`),
  CONSTRAINT `fk_Product_Category1`
    FOREIGN KEY (`id_category`)
    REFERENCES `IEB`.`Category` (`id_category`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Product_Market1`
    FOREIGN KEY (`id_market`)
    REFERENCES `IEB`.`Market` (`id_market`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Product_Category1_idx` ON `IEB`.`Product` (`id_category` ASC) VISIBLE;

CREATE INDEX `fk_Product_Market1_idx` ON `IEB`.`Product` (`id_market` ASC) VISIBLE;

CREATE UNIQUE INDEX `product_name_UNIQUE` ON `IEB`.`Product` (`product_name` ASC) VISIBLE;

CREATE UNIQUE INDEX `product_code_UNIQUE` ON `IEB`.`Product` (`product_code` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`ClientUpdate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`ClientUpdate` ;

CREATE TABLE IF NOT EXISTS `IEB`.`ClientUpdate` (
  `id_client_update` INT UNSIGNED NOT NULL,
  `client_name` VARCHAR(45) NULL,
  `updated_on` DATETIME NULL DEFAULT NOW(),
  `Client_id_client` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_client_update`, `Client_id_client`),
  CONSTRAINT `fk_ClientUpdate_Client1`
    FOREIGN KEY (`Client_id_client`)
    REFERENCES `IEB`.`Client` (`id_client`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_ClientUpdate_Client1_idx` ON `IEB`.`ClientUpdate` (`Client_id_client` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`MarketUpdate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`MarketUpdate` ;

CREATE TABLE IF NOT EXISTS `IEB`.`MarketUpdate` (
  `id_update_market` INT NOT NULL,
  `market_name` VARCHAR(45) NULL COMMENT 'Nombre de supermercado',
  `updated_on` DATETIME NULL DEFAULT NOW(),
  `Market_id_Market` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_update_market`, `Market_id_Market`),
  CONSTRAINT `fk_MarketUpdate_Market1`
    FOREIGN KEY (`Market_id_Market`)
    REFERENCES `IEB`.`Market` (`id_market`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_MarketUpdate_Market1_idx` ON `IEB`.`MarketUpdate` (`Market_id_Market` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`ProductUpdate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`ProductUpdate` ;

CREATE TABLE IF NOT EXISTS `IEB`.`ProductUpdate` (
  `id_product_update` INT NOT NULL,
  `buy_price` FLOAT NULL,
  `publicSellPrice` FLOAT NULL,
  `mayor_sell_price` FLOAT NULL,
  `updated_on` DATETIME NULL DEFAULT NOW(),
  `Product_id_product` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_product_update`, `Product_id_product`),
  CONSTRAINT `fk_ProductUpdate_Product1`
    FOREIGN KEY (`Product_id_product`)
    REFERENCES `IEB`.`Product` (`id_product`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_ProductUpdate_Product1_idx` ON `IEB`.`ProductUpdate` (`Product_id_product` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`CategotyUpdate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`CategotyUpdate` ;

CREATE TABLE IF NOT EXISTS `IEB`.`CategotyUpdate` (
  `id_categopry_update` INT NOT NULL,
  `category_name` VARCHAR(45) NULL,
  `updated_on` DATETIME NULL DEFAULT NOW(),
  `Category_id_category` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_categopry_update`, `Category_id_category`),
  CONSTRAINT `fk_CategotyUpdate_Category1`
    FOREIGN KEY (`Category_id_category`)
    REFERENCES `IEB`.`Category` (`id_category`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_CategotyUpdate_Category1_idx` ON `IEB`.`CategotyUpdate` (`Category_id_category` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IEB`.`Client_has_Market`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IEB`.`Client_has_Market` ;

CREATE TABLE IF NOT EXISTS `IEB`.`Client_has_Market` (
  `Client_id_client` INT UNSIGNED NOT NULL,
  `Market_id_market` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Client_id_client`, `Market_id_market`),
  CONSTRAINT `fk_Client_has_Market_Client1`
    FOREIGN KEY (`Client_id_client`)
    REFERENCES `IEB`.`Client` (`id_client`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Client_has_Market_Market1`
    FOREIGN KEY (`Market_id_market`)
    REFERENCES `IEB`.`Market` (`id_market`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Client_has_Market_Market1_idx` ON `IEB`.`Client_has_Market` (`Market_id_market` ASC) VISIBLE;

CREATE INDEX `fk_Client_has_Market_Client1_idx` ON `IEB`.`Client_has_Market` (`Client_id_client` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


USE `ieb`;
DROP procedure IF EXISTS `ProductAddOrEdit`;

DELIMITER $$
USE `ieb`$$
CREATE PROCEDURE `ProductAddOrEdit` (

  IN _id_product  INT,
  IN _product_code INT,
  IN _product_name VARCHAR(45),
  IN _buy_price FLOAT,
  IN _public_sell_price FLOAT,
  IN _mayor_sell_price FLOAT,
  IN _category_code INT,
  IN _market_code INT
)
BEGIN 
  IF _id_product = 0 THEN
    INSERT INTO Product (product_code, product_name, buy_price, public_sell_price, mayor_sell_price, category_code, id_market)
    VALUES (_product_code, _product_name, _buy_price, _public_sell_price, _mayor_sell_price, _id_category, _id_market);

    SET _id_product = LAST_INSERT_ID();
  ELSE
    UPDATE Product
    SET
	buy_price = _buy_price, 
	public_sell_price = _public_sell_price,
	mayor_sell_price = _mayor_sell_price
    WHERE id_product = _id_product;
  END IF;

  SELECT _id_product AS 'id_product';
END$$

DELIMITER ;

USE `ieb`;
DROP procedure IF EXISTS `CategoryAddOrEdit`;

DELIMITER $$
USE `ieb`$$
CREATE PROCEDURE `CategoryAddOrEdit` (

  IN _id_category  INT,
  IN _category_code INT,
  IN _category_name VARCHAR(45)
)
BEGIN 
  IF _id_category = 0 THEN
    INSERT INTO Category (id_category, category_code, category_name)
    VALUES (_id_category, _category_code, _category_name);

    SET _id_category = LAST_INSERT_ID();
  ELSE
    UPDATE Category
    SET
	category_name = _category_name
    WHERE id_category = _id_category;
  END IF;

  SELECT _id_category AS 'id_category';
END$$

DELIMITER ;

USE `ieb`;
DROP procedure IF EXISTS `MarketAddOrEdit`;

DELIMITER $$
USE `ieb`$$
CREATE PROCEDURE `MarketAddOrEdit` (

  IN _id_market  INT,
  IN _market_code INT,
  IN _market_name VARCHAR(45),
  IN _market_email VARCHAR(100)
)
BEGIN 
  IF _id_market = 0 THEN
    INSERT INTO Market (id_market, market_code, market_name, market_email )
    VALUES (_id_market, _market_code, _market_name, _market_email);

    SET _id_market = LAST_INSERT_ID();
  ELSE
    UPDATE Market
    SET
	market_email = _market_email
    WHERE id_market = _id_market;
  END IF;

  SELECT _id_market AS 'id_market';
END$$

DELIMITER ;

USE `ieb`;
DROP procedure IF EXISTS `ClientAddOrEdit`;

DELIMITER $$
USE `ieb`$$
CREATE PROCEDURE `ClientAddOrEdit` (

  IN _id_client  INT,
  IN _client_code INT,
  IN _client_name VARCHAR(45),
  IN _client_email VARCHAR(100)
)
BEGIN 
  IF _id_client = 0 THEN
    INSERT INTO Client (id_client, client_code, client_name, client_email )
    VALUES (_id_client, _client_code, _client_name, _client_email);

    SET _id_client = LAST_INSERT_ID();
  ELSE
    UPDATE Client
    SET
    client_email = _client_email
    WHERE id_client = _id_client;
  END IF;

  SELECT _id_client AS 'id_client';
END$$

DELIMITER ;

USE `ieb`;
DROP procedure IF EXISTS `ClientMarketAdd`;
DELIMITER $$
USE `ieb`$$
CREATE PROCEDURE `ClientMarketAdd` (
  IN _id_client  INT,
  IN _id_market INT
)
BEGIN 
    INSERT INTO client_has_market (Client_id_client, Market_id_market)
    VALUES (_id_client, _id_market);
    SET _id_client = LAST_INSERT_ID();
END$$
DELIMITER ;
